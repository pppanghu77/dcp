#!/bin/bash

# SSH Key Setup Script
# 快速为远程主机设置SSH密钥认证，实现免密登录

# 版本信息
VERSION="1.0.0"

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# 配置
SSH_KEY_DIR="$HOME/.ssh"
DEFAULT_KEY_NAME="id_rsa"
DEFAULT_KEY_TYPE="rsa"
DEFAULT_KEY_BITS="4096"

# 打印帮助信息
usage() {
    echo -e "${BLUE}SSH Key Setup Script v${VERSION}${NC}"
    echo "快速为远程主机设置SSH密钥认证，实现免密登录"
    echo
    echo "Usage:"
    echo "  $0 [options] user@hostname"
    echo
    echo "Options:"
    echo "  -h, --help           显示此帮助信息"
    echo "  -k, --key FILE       使用指定的SSH密钥文件 (默认: ~/.ssh/id_rsa)"
    echo "  -t, --type TYPE      密钥类型 (rsa|ed25519|ecdsa, 默认: rsa)"
    echo "  -b, --bits BITS      RSA密钥长度 (默认: 4096)"
    echo "  -p, --port PORT      SSH端口 (默认: 22)"
    echo "  -f, --force          强制覆盖现有密钥"
    echo "  --test               仅测试SSH连接"
    echo "  --list-keys          列出本地SSH密钥"
    echo "  --generate-only      仅生成密钥，不上传"
    echo
    echo "Examples:"
    echo "  $0 user@192.168.1.100"
    echo "  $0 -k ~/.ssh/mykey user@server.com"
    echo "  $0 -t ed25519 user@host.local"
    echo "  $0 -p 2222 user@custom-port-host"
    echo "  $0 --test user@host   # 测试连接"
    echo
    echo "Features:"
    echo "  ✓ 自动生成SSH密钥对"
    echo "  ✓ 自动上传公钥到远程主机"
    echo "  ✓ 支持多种密钥类型"
    echo "  ✓ 自动测试连接"
    echo "  ✓ 支持自定义端口"
    echo
}

# 检查依赖
check_dependencies() {
    local missing_deps=()

    if ! command -v ssh >/dev/null 2>&1; then
        missing_deps+=("ssh")
    fi

    if ! command -v ssh-keygen >/dev/null 2>&1; then
        missing_deps+=("ssh-keygen")
    fi

    if ! command -v ssh-copy-id >/dev/null 2>&1; then
        missing_deps+=("ssh-copy-id")
    fi

    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        echo -e "${RED}错误: 缺少必要的依赖:${NC}"
        printf '  %s\n' "${missing_deps[@]}"
        echo
        echo "请安装 openssh-client 包:"
        echo "  Ubuntu/Debian: sudo apt install openssh-client"
        echo "  CentOS/RHEL:   sudo yum install openssh-clients"
        echo "  Arch Linux:    sudo pacman -S openssh"
        exit 1
    fi
}

# 解析主机信息
parse_host() {
    local input="$1"

    if [[ ! "$input" =~ ^[^@]+@[^@]+$ ]]; then
        echo -e "${RED}错误: 主机格式必须为 user@hostname${NC}"
        exit 1
    fi

    USER="${input%%@*}"
    HOST="${input##*@}"

    # 检查是否包含端口
    if [[ "$HOST" =~ ^(.+):([0-9]+)$ ]]; then
        HOST="${BASH_REMATCH[1]}"
        PORT="${BASH_REMATCH[2]}"
    fi

    echo -e "${BLUE}目标主机信息:${NC}"
    echo "  用户: $USER"
    echo "  主机: $HOST"
    echo "  端口: $PORT"
    echo
}

# 生成SSH密钥
generate_ssh_key() {
    local key_file="$1"
    local key_type="$2"
    local key_bits="$3"
    local force="$4"

    # 检查密钥是否已存在
    if [[ -f "$key_file" && "$force" != "true" ]]; then
        echo -e "${YELLOW}SSH密钥已存在: ${NC}$key_file"
        read -p "是否使用现有密钥? [Y/n]: " -r response
        if [[ "$response" =~ ^[Nn]$ ]]; then
            read -p "是否覆盖现有密钥? [y/N]: " -r response
            if [[ ! "$response" =~ ^[Yy]$ ]]; then
                echo -e "${RED}操作已取消${NC}"
                exit 1
            fi
            force="true"
        else
            echo -e "${GREEN}使用现有密钥: ${NC}$key_file"
            return 0
        fi
    fi

    # 确保 .ssh 目录存在
    if [[ ! -d "$SSH_KEY_DIR" ]]; then
        mkdir -p "$SSH_KEY_DIR"
        chmod 700 "$SSH_KEY_DIR"
    fi

    echo -e "${BLUE}生成SSH密钥...${NC}"
    echo "  类型: $key_type"
    [[ "$key_type" == "rsa" ]] && echo "  长度: $key_bits bits"
    echo "  文件: $key_file"
    echo

    # 生成密钥
    local ssh_keygen_cmd="ssh-keygen -t $key_type"
    [[ "$key_type" == "rsa" ]] && ssh_keygen_cmd+=" -b $key_bits"
    ssh_keygen_cmd+=" -f '$key_file' -N '' -C '$(whoami)@$(hostname)-$(date +%Y%m%d)'"

    if eval "$ssh_keygen_cmd"; then
        chmod 600 "$key_file"
        chmod 644 "${key_file}.pub"
        echo -e "${GREEN}✓ SSH密钥生成成功${NC}"
        echo -e "  私钥: $key_file"
        echo -e "  公钥: ${key_file}.pub"
        echo
    else
        echo -e "${RED}✗ SSH密钥生成失败${NC}"
        exit 1
    fi
}

# 测试SSH连接
test_ssh_connection() {
    local user="$1"
    local host="$2"
    local port="$3"
    local key_file="$4"

    echo -e "${BLUE}测试SSH连接...${NC}"

    local ssh_opts="-o BatchMode=yes -o ConnectTimeout=10 -o StrictHostKeyChecking=no"
    [[ -n "$key_file" ]] && ssh_opts+=" -i '$key_file'"
    [[ -n "$port" ]] && ssh_opts+=" -p $port"

    if ssh $ssh_opts "$user@$host" "echo 'SSH连接测试成功'" 2>/dev/null; then
        echo -e "${GREEN}✓ SSH连接成功 (免密登录已配置)${NC}"
        return 0
    else
        echo -e "${YELLOW}⚠ SSH连接需要密码验证${NC}"
        return 1
    fi
}

# 上传SSH公钥
upload_ssh_key() {
    local user="$1"
    local host="$2"
    local port="$3"
    local key_file="$4"

    local pub_key_file="${key_file}.pub"

    if [[ ! -f "$pub_key_file" ]]; then
        echo -e "${RED}错误: 公钥文件不存在: $pub_key_file${NC}"
        exit 1
    fi

    echo -e "${BLUE}上传SSH公钥到远程主机...${NC}"

    # 构建 ssh-copy-id 命令
    local copy_cmd="ssh-copy-id"
    [[ -n "$port" ]] && copy_cmd+=" -p $port"
    copy_cmd+=" -i '$pub_key_file' '$user@$host'"

    echo "执行命令: $copy_cmd"
    echo -e "${YELLOW}请输入远程主机的密码:${NC}"

    if eval "$copy_cmd"; then
        echo -e "${GREEN}✓ SSH公钥上传成功${NC}"
        return 0
    else
        echo -e "${RED}✗ SSH公钥上传失败${NC}"
        return 1
    fi
}

# 列出本地SSH密钥
list_ssh_keys() {
    echo -e "${BLUE}本地SSH密钥列表:${NC}"
    echo

    if [[ ! -d "$SSH_KEY_DIR" ]]; then
        echo -e "${YELLOW}SSH目录不存在: $SSH_KEY_DIR${NC}"
        return
    fi

    local found_keys=false

    for key_file in "$SSH_KEY_DIR"/*.pub; do
        if [[ -f "$key_file" ]]; then
            found_keys=true
            local private_key="${key_file%.pub}"
            local key_type=$(ssh-keygen -l -f "$key_file" 2>/dev/null | awk '{print $4}' | tr -d '()')
            local key_length=$(ssh-keygen -l -f "$key_file" 2>/dev/null | awk '{print $1}')
            local key_comment=$(ssh-keygen -l -f "$key_file" 2>/dev/null | awk '{for(i=3;i<=NF;i++) printf "%s ", $i; print ""}' | sed 's/[()]//g')

            echo -e "${GREEN}私钥:${NC} $private_key"
            echo -e "${GREEN}公钥:${NC} $key_file"
            echo -e "${GREEN}类型:${NC} $key_type ($key_length bits)"
            echo -e "${GREEN}注释:${NC} $key_comment"
            echo
        fi
    done

    if [[ "$found_keys" == false ]]; then
        echo -e "${YELLOW}未找到SSH密钥文件${NC}"
        echo "使用以下命令生成新密钥:"
        echo "  $0 --generate-only user@hostname"
    fi
}

# 显示连接配置建议
show_ssh_config() {
    local user="$1"
    local host="$2"
    local port="$3"
    local key_file="$4"

    echo -e "${CYAN}SSH配置建议:${NC}"
    echo
    echo "可以在 ~/.ssh/config 中添加以下配置:"
    echo
    echo "Host $host"
    echo "    HostName $host"
    echo "    User $user"
    [[ -n "$port" && "$port" != "22" ]] && echo "    Port $port"
    echo "    IdentityFile $key_file"
    echo "    IdentitiesOnly yes"
    echo
    echo "配置后可以直接使用: ssh $host"
    echo
}

# 主函数
main() {
    local target_host=""
    local key_file="$SSH_KEY_DIR/$DEFAULT_KEY_NAME"
    local key_type="$DEFAULT_KEY_TYPE"
    local key_bits="$DEFAULT_KEY_BITS"
    local port="22"
    local force=false
    local test_only=false
    local list_keys=false
    local generate_only=false

    # 解析命令行参数
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                usage
                exit 0
                ;;
            -k|--key)
                key_file="$2"
                shift 2
                ;;
            -t|--type)
                key_type="$2"
                shift 2
                ;;
            -b|--bits)
                key_bits="$2"
                shift 2
                ;;
            -p|--port)
                port="$2"
                shift 2
                ;;
            -f|--force)
                force=true
                shift
                ;;
            --test)
                test_only=true
                shift
                ;;
            --list-keys)
                list_keys=true
                shift
                ;;
            --generate-only)
                generate_only=true
                shift
                ;;
            -*)
                echo -e "${RED}错误: 未知选项 $1${NC}"
                echo "使用 $0 --help 查看帮助信息"
                exit 1
                ;;
            *)
                if [[ -z "$target_host" ]]; then
                    target_host="$1"
                else
                    echo -e "${RED}错误: 多余的参数 $1${NC}"
                    exit 1
                fi
                shift
                ;;
        esac
    done

    # 检查依赖
    check_dependencies

    # 列出密钥
    if [[ "$list_keys" == true ]]; then
        list_ssh_keys
        exit 0
    fi

    # 检查目标主机参数
    if [[ -z "$target_host" ]]; then
        echo -e "${RED}错误: 请指定目标主机${NC}"
        echo "使用 $0 --help 查看帮助信息"
        exit 1
    fi

    # 解析主机信息
    parse_host "$target_host"

    # 扩展密钥文件路径
    key_file="${key_file/#\~/$HOME}"

    # 仅测试连接
    if [[ "$test_only" == true ]]; then
        test_ssh_connection "$USER" "$HOST" "$port" "$key_file"
        exit $?
    fi

    # 验证密钥类型
    if [[ ! "$key_type" =~ ^(rsa|ed25519|ecdsa)$ ]]; then
        echo -e "${RED}错误: 不支持的密钥类型: $key_type${NC}"
        echo "支持的类型: rsa, ed25519, ecdsa"
        exit 1
    fi

    # 生成密钥
    generate_ssh_key "$key_file" "$key_type" "$key_bits" "$force"

    # 仅生成密钥
    if [[ "$generate_only" == true ]]; then
        echo -e "${GREEN}密钥生成完成！${NC}"
        echo "要上传到远程主机，请运行:"
        echo "  $0 $target_host -k $key_file"
        exit 0
    fi

    # 测试现有连接
    if test_ssh_connection "$USER" "$HOST" "$port" "$key_file"; then
        echo -e "${GREEN}SSH免密登录已配置完成！${NC}"
        show_ssh_config "$USER" "$HOST" "$port" "$key_file"
        exit 0
    fi

    # 上传公钥
    echo
    if upload_ssh_key "$USER" "$HOST" "$port" "$key_file"; then
        echo
        echo -e "${BLUE}验证配置...${NC}"
        if test_ssh_connection "$USER" "$HOST" "$port" "$key_file"; then
            echo
            echo -e "${GREEN}🎉 SSH免密登录配置成功！${NC}"
            show_ssh_config "$USER" "$HOST" "$port" "$key_file"
        else
            echo -e "${YELLOW}⚠ 配置可能未完全生效，请稍后重试${NC}"
        fi
    else
        echo -e "${RED}SSH密钥配置失败${NC}"
        exit 1
    fi
}

# 运行主函数
main "$@"
